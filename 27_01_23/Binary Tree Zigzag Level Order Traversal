// Binary Tree Zigzag Level Order Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> l= new ArrayList<>();
        Queue<TreeNode> q=new LinkedList<>();
        List<Integer> l2=new ArrayList<>();
        if(root==null){
            return l;
        }
        l2.add(root.val);
        l.add(l2);
        q.add(root);
        boolean isforward=false;
        while(!q.isEmpty()){
            ArrayList<Integer> l1=new ArrayList<>();
            int size=q.size();
            for(int i=1;i<=size;i++){
                TreeNode cur=q.poll();
                if(isforward){
                    if(cur.left!=null){
                        l1.add(cur.left.val);
                        q.add(cur.left);
                    }
                    if(cur.right!=null){
                        l1.add(cur.right.val);
                        q.add(cur.right);
                    }
                }
                else{

                    if(cur.left!=null){
                        l1.add(0,cur.left.val);
                        q.add(cur.left);
                    }
                    if(cur.right!=null){
                        l1.add(0,cur.right.val);
                        q.add(cur.right);
                    }
                }
            }
            if(isforward) isforward=false;
            else isforward=true;
            if(!l1.isEmpty()){
            l.add(l1);}
        }
        return l;
    }
}
