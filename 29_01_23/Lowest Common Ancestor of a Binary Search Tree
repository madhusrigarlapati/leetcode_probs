//Lowest Common Ancestor of a Binary Search Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return root;
        }
        TreeNode cur=root;
        TreeNode parent=null;
        while(cur!=null){
            parent=cur;
            if(p.val<cur.val && q.val<cur.val){
                cur=cur.left;
            }
            else if(p.val>cur.val && q.val>cur.val){
                cur=cur.right;
            }
            else if((p.val>cur.val && q.val<cur.val)||(p.val<cur.val && q.val>cur.val)){
                return cur;
            }
            else if((p.val==cur.val &&(q.val<cur.val || q.val>cur.val))||(q.val==cur.val &&(p.val<cur.val || p.val>cur.val))){
                return cur;
            }
        }
        return root;
    }
}
